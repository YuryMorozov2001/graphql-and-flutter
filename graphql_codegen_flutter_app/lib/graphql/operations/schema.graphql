schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}
"mutation root"
type mutation_root {
  """
  delete data from the table: "todo"
  """
  delete_todo(
    "filter the rows which have to be deleted"
    where: todo_bool_exp!
  ): todo_mutation_response
  """
  delete single row from the table: "todo"
  """
  delete_todo_by_pk(id: Int!): todo
  """
  delete data from the table: "user"
  """
  delete_user(
    "filter the rows which have to be deleted"
    where: user_bool_exp!
  ): user_mutation_response
  """
  delete single row from the table: "user"
  """
  delete_user_by_pk(id: Int!): user
  """
  insert data into the table: "todo"
  """
  insert_todo(
    "the rows to be inserted"
    objects: [todo_insert_input!]!,
    "upsert condition"
    on_conflict: todo_on_conflict
  ): todo_mutation_response
  """
  insert a single row into the table: "todo"
  """
  insert_todo_one(
    "the row to be inserted"
    object: todo_insert_input!,
    "upsert condition"
    on_conflict: todo_on_conflict
  ): todo
  """
  insert data into the table: "user"
  """
  insert_user(
    "the rows to be inserted"
    objects: [user_insert_input!]!,
    "upsert condition"
    on_conflict: user_on_conflict
  ): user_mutation_response
  """
  insert a single row into the table: "user"
  """
  insert_user_one(
    "the row to be inserted"
    object: user_insert_input!,
    "upsert condition"
    on_conflict: user_on_conflict
  ): user
  """
  update data of the table: "todo"
  """
  update_todo(
    "increments the numeric columns with given value of the filtered values"
    _inc: todo_inc_input,
    "sets the columns of the filtered rows to the given values"
    _set: todo_set_input,
    "filter the rows which have to be updated"
    where: todo_bool_exp!
  ): todo_mutation_response
  """
  update single row of the table: "todo"
  """
  update_todo_by_pk(
    "increments the numeric columns with given value of the filtered values"
    _inc: todo_inc_input,
    "sets the columns of the filtered rows to the given values"
    _set: todo_set_input,pk_columns: todo_pk_columns_input!  ): todo
  """
  update multiples rows of table: "todo"
  """
  update_todo_many(
    "updates to execute, in order"
    updates: [todo_updates!]!
  ): [todo_mutation_response]
  """
  update data of the table: "user"
  """
  update_user(
    "increments the numeric columns with given value of the filtered values"
    _inc: user_inc_input,
    "sets the columns of the filtered rows to the given values"
    _set: user_set_input,
    "filter the rows which have to be updated"
    where: user_bool_exp!
  ): user_mutation_response
  """
  update single row of the table: "user"
  """
  update_user_by_pk(
    "increments the numeric columns with given value of the filtered values"
    _inc: user_inc_input,
    "sets the columns of the filtered rows to the given values"
    _set: user_set_input,pk_columns: user_pk_columns_input!  ): user
  """
  update multiples rows of table: "user"
  """
  update_user_many(
    "updates to execute, in order"
    updates: [user_updates!]!
  ): [user_mutation_response]
}
type query_root {
  """
  fetch data from the table: "todo"
  """
  todo(
    "distinct select on columns"
    distinct_on: [todo_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [todo_order_by!],
    "filter the rows returned"
    where: todo_bool_exp
  ): [todo!]!
  """
  fetch aggregated fields from the table: "todo"
  """
  todo_aggregate(
    "distinct select on columns"
    distinct_on: [todo_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [todo_order_by!],
    "filter the rows returned"
    where: todo_bool_exp
  ): todo_aggregate!
  """
  fetch data from the table: "todo" using primary key columns
  """
  todo_by_pk(id: Int!): todo
  """
  fetch data from the table: "user"
  """
  user(
    "distinct select on columns"
    distinct_on: [user_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [user_order_by!],
    "filter the rows returned"
    where: user_bool_exp
  ): [user!]!
  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    "distinct select on columns"
    distinct_on: [user_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [user_order_by!],
    "filter the rows returned"
    where: user_bool_exp
  ): user_aggregate!
  """
  fetch data from the table: "user" using primary key columns
  """
  user_by_pk(id: Int!): user
}
type subscription_root {
  """
  fetch data from the table: "todo"
  """
  todo(
    "distinct select on columns"
    distinct_on: [todo_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [todo_order_by!],
    "filter the rows returned"
    where: todo_bool_exp
  ): [todo!]!
  """
  fetch aggregated fields from the table: "todo"
  """
  todo_aggregate(
    "distinct select on columns"
    distinct_on: [todo_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [todo_order_by!],
    "filter the rows returned"
    where: todo_bool_exp
  ): todo_aggregate!
  """
  fetch data from the table: "todo" using primary key columns
  """
  todo_by_pk(id: Int!): todo
  """
  fetch data from the table in a streaming manner : "todo"
  """
  todo_stream(
    "maximum number of rows returned in a single batch"
    batch_size: Int!,
    "cursor to stream the results returned by the query"
    cursor: [todo_stream_cursor_input]!,
    "filter the rows returned"
    where: todo_bool_exp
  ): [todo!]!
  """
  fetch data from the table: "user"
  """
  user(
    "distinct select on columns"
    distinct_on: [user_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [user_order_by!],
    "filter the rows returned"
    where: user_bool_exp
  ): [user!]!
  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    "distinct select on columns"
    distinct_on: [user_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [user_order_by!],
    "filter the rows returned"
    where: user_bool_exp
  ): user_aggregate!
  """
  fetch data from the table: "user" using primary key columns
  """
  user_by_pk(id: Int!): user
  """
  fetch data from the table in a streaming manner : "user"
  """
  user_stream(
    "maximum number of rows returned in a single batch"
    batch_size: Int!,
    "cursor to stream the results returned by the query"
    cursor: [user_stream_cursor_input]!,
    "filter the rows returned"
    where: user_bool_exp
  ): [user!]!
}
"""
columns and relationships of "todo"
"""
type todo {
  id: Int!
  task: String!
  "An object relationship"
  user: user!
  user_id: Int!
}
"""
aggregated selection of "todo"
"""
type todo_aggregate {
  aggregate: todo_aggregate_fields
  nodes: [todo!]!
}
"""
aggregate fields of "todo"
"""
type todo_aggregate_fields {
  avg: todo_avg_fields
  count(columns: [todo_select_column!], distinct: Boolean): Int!
  max: todo_max_fields
  min: todo_min_fields
  stddev: todo_stddev_fields
  stddev_pop: todo_stddev_pop_fields
  stddev_samp: todo_stddev_samp_fields
  sum: todo_sum_fields
  var_pop: todo_var_pop_fields
  var_samp: todo_var_samp_fields
  variance: todo_variance_fields
}
"aggregate avg on columns"
type todo_avg_fields {
  id: Float
  user_id: Float
}
"aggregate max on columns"
type todo_max_fields {
  id: Int
  task: String
  user_id: Int
}
"aggregate min on columns"
type todo_min_fields {
  id: Int
  task: String
  user_id: Int
}
"""
response of any mutation on the table "todo"
"""
type todo_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [todo!]!
}
"aggregate stddev on columns"
type todo_stddev_fields {
  id: Float
  user_id: Float
}
"aggregate stddev_pop on columns"
type todo_stddev_pop_fields {
  id: Float
  user_id: Float
}
"aggregate stddev_samp on columns"
type todo_stddev_samp_fields {
  id: Float
  user_id: Float
}
"aggregate sum on columns"
type todo_sum_fields {
  id: Int
  user_id: Int
}
"aggregate var_pop on columns"
type todo_var_pop_fields {
  id: Float
  user_id: Float
}
"aggregate var_samp on columns"
type todo_var_samp_fields {
  id: Float
  user_id: Float
}
"aggregate variance on columns"
type todo_variance_fields {
  id: Float
  user_id: Float
}
"""
columns and relationships of "user"
"""
type user {
  age: Int!
  id: Int!
  name: String!
  "An array relationship"
  todos(
    "distinct select on columns"
    distinct_on: [todo_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [todo_order_by!],
    "filter the rows returned"
    where: todo_bool_exp
  ): [todo!]!
  "An aggregate relationship"
  todos_aggregate(
    "distinct select on columns"
    distinct_on: [todo_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [todo_order_by!],
    "filter the rows returned"
    where: todo_bool_exp
  ): todo_aggregate!
}
"""
aggregated selection of "user"
"""
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}
"""
aggregate fields of "user"
"""
type user_aggregate_fields {
  avg: user_avg_fields
  count(columns: [user_select_column!], distinct: Boolean): Int!
  max: user_max_fields
  min: user_min_fields
  stddev: user_stddev_fields
  stddev_pop: user_stddev_pop_fields
  stddev_samp: user_stddev_samp_fields
  sum: user_sum_fields
  var_pop: user_var_pop_fields
  var_samp: user_var_samp_fields
  variance: user_variance_fields
}
"aggregate avg on columns"
type user_avg_fields {
  age: Float
  id: Float
}
"aggregate max on columns"
type user_max_fields {
  age: Int
  id: Int
  name: String
}
"aggregate min on columns"
type user_min_fields {
  age: Int
  id: Int
  name: String
}
"""
response of any mutation on the table "user"
"""
type user_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [user!]!
}
"aggregate stddev on columns"
type user_stddev_fields {
  age: Float
  id: Float
}
"aggregate stddev_pop on columns"
type user_stddev_pop_fields {
  age: Float
  id: Float
}
"aggregate stddev_samp on columns"
type user_stddev_samp_fields {
  age: Float
  id: Float
}
"aggregate sum on columns"
type user_sum_fields {
  age: Int
  id: Int
}
"aggregate var_pop on columns"
type user_var_pop_fields {
  age: Float
  id: Float
}
"aggregate var_samp on columns"
type user_var_samp_fields {
  age: Float
  id: Float
}
"aggregate variance on columns"
type user_variance_fields {
  age: Float
  id: Float
}
"ordering argument of a cursor"
enum cursor_ordering {
  "ascending ordering of the cursor"
  ASC
  "descending ordering of the cursor"
  DESC
}
"column ordering options"
enum order_by {
  "in ascending order, nulls last"
  asc
  "in ascending order, nulls first"
  asc_nulls_first
  "in ascending order, nulls last"
  asc_nulls_last
  "in descending order, nulls first"
  desc
  "in descending order, nulls first"
  desc_nulls_first
  "in descending order, nulls last"
  desc_nulls_last
}
"""
unique or primary key constraints on table "todo"
"""
enum todo_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  todo_pkey
}
"""
select columns of table "todo"
"""
enum todo_select_column {
  "column name"
  id
  "column name"
  task
  "column name"
  user_id
}
"""
update columns of table "todo"
"""
enum todo_update_column {
  "column name"
  id
  "column name"
  task
  "column name"
  user_id
}
"""
unique or primary key constraints on table "user"
"""
enum user_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  user_pkey
}
"""
select columns of table "user"
"""
enum user_select_column {
  "column name"
  age
  "column name"
  id
  "column name"
  name
}
"""
update columns of table "user"
"""
enum user_update_column {
  "column name"
  age
  "column name"
  id
  "column name"
  name
}
"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}
"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  "does the column match the given case-insensitive pattern"
  _ilike: String
  _in: [String!]
  "does the column match the given POSIX regular expression, case insensitive"
  _iregex: String
  _is_null: Boolean
  "does the column match the given pattern"
  _like: String
  _lt: String
  _lte: String
  _neq: String
  "does the column NOT match the given case-insensitive pattern"
  _nilike: String
  _nin: [String!]
  "does the column NOT match the given POSIX regular expression, case insensitive"
  _niregex: String
  "does the column NOT match the given pattern"
  _nlike: String
  "does the column NOT match the given POSIX regular expression, case sensitive"
  _nregex: String
  "does the column NOT match the given SQL regular expression"
  _nsimilar: String
  "does the column match the given POSIX regular expression, case sensitive"
  _regex: String
  "does the column match the given SQL regular expression"
  _similar: String
}
"""
order by aggregate values of table "todo"
"""
input todo_aggregate_order_by {
  avg: todo_avg_order_by
  count: order_by
  max: todo_max_order_by
  min: todo_min_order_by
  stddev: todo_stddev_order_by
  stddev_pop: todo_stddev_pop_order_by
  stddev_samp: todo_stddev_samp_order_by
  sum: todo_sum_order_by
  var_pop: todo_var_pop_order_by
  var_samp: todo_var_samp_order_by
  variance: todo_variance_order_by
}
"""
input type for inserting array relation for remote table "todo"
"""
input todo_arr_rel_insert_input {
  data: [todo_insert_input!]!
  "upsert condition"
  on_conflict: todo_on_conflict
}
"""
order by avg() on columns of table "todo"
"""
input todo_avg_order_by {
  id: order_by
  user_id: order_by
}
"""
Boolean expression to filter rows from the table "todo". All fields are combined with a logical 'AND'.
"""
input todo_bool_exp {
  _and: [todo_bool_exp!]
  _not: todo_bool_exp
  _or: [todo_bool_exp!]
  id: Int_comparison_exp
  task: String_comparison_exp
  user: user_bool_exp
  user_id: Int_comparison_exp
}
"""
input type for incrementing numeric columns in table "todo"
"""
input todo_inc_input {
  id: Int
  user_id: Int
}
"""
input type for inserting data into table "todo"
"""
input todo_insert_input {
  id: Int
  task: String
  user: user_obj_rel_insert_input
  user_id: Int
}
"""
order by max() on columns of table "todo"
"""
input todo_max_order_by {
  id: order_by
  task: order_by
  user_id: order_by
}
"""
order by min() on columns of table "todo"
"""
input todo_min_order_by {
  id: order_by
  task: order_by
  user_id: order_by
}
"""
on_conflict condition type for table "todo"
"""
input todo_on_conflict {
  constraint: todo_constraint!
  update_columns: [todo_update_column!]! = []
  where: todo_bool_exp
}
"""
Ordering options when selecting data from "todo".
"""
input todo_order_by {
  id: order_by
  task: order_by
  user: user_order_by
  user_id: order_by
}
"primary key columns input for table: todo"
input todo_pk_columns_input {
  id: Int!
}
"""
input type for updating data in table "todo"
"""
input todo_set_input {
  id: Int
  task: String
  user_id: Int
}
"""
order by stddev() on columns of table "todo"
"""
input todo_stddev_order_by {
  id: order_by
  user_id: order_by
}
"""
order by stddev_pop() on columns of table "todo"
"""
input todo_stddev_pop_order_by {
  id: order_by
  user_id: order_by
}
"""
order by stddev_samp() on columns of table "todo"
"""
input todo_stddev_samp_order_by {
  id: order_by
  user_id: order_by
}
"""
Streaming cursor of the table "todo"
"""
input todo_stream_cursor_input {
  "Stream column input with initial value"
  initial_value: todo_stream_cursor_value_input!
  "cursor ordering"
  ordering: cursor_ordering
}
"Initial value of the column from where the streaming should start"
input todo_stream_cursor_value_input {
  id: Int
  task: String
  user_id: Int
}
"""
order by sum() on columns of table "todo"
"""
input todo_sum_order_by {
  id: order_by
  user_id: order_by
}
input todo_updates {
  "increments the numeric columns with given value of the filtered values"
  _inc: todo_inc_input
  "sets the columns of the filtered rows to the given values"
  _set: todo_set_input
  where: todo_bool_exp!
}
"""
order by var_pop() on columns of table "todo"
"""
input todo_var_pop_order_by {
  id: order_by
  user_id: order_by
}
"""
order by var_samp() on columns of table "todo"
"""
input todo_var_samp_order_by {
  id: order_by
  user_id: order_by
}
"""
order by variance() on columns of table "todo"
"""
input todo_variance_order_by {
  id: order_by
  user_id: order_by
}
"""
Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
"""
input user_bool_exp {
  _and: [user_bool_exp!]
  _not: user_bool_exp
  _or: [user_bool_exp!]
  age: Int_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  todos: todo_bool_exp
}
"""
input type for incrementing numeric columns in table "user"
"""
input user_inc_input {
  age: Int
  id: Int
}
"""
input type for inserting data into table "user"
"""
input user_insert_input {
  age: Int
  id: Int
  name: String
  todos: todo_arr_rel_insert_input
}
"""
input type for inserting object relation for remote table "user"
"""
input user_obj_rel_insert_input {
  data: user_insert_input!
  "upsert condition"
  on_conflict: user_on_conflict
}
"""
on_conflict condition type for table "user"
"""
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]! = []
  where: user_bool_exp
}
"""
Ordering options when selecting data from "user".
"""
input user_order_by {
  age: order_by
  id: order_by
  name: order_by
  todos_aggregate: todo_aggregate_order_by
}
"primary key columns input for table: user"
input user_pk_columns_input {
  id: Int!
}
"""
input type for updating data in table "user"
"""
input user_set_input {
  age: Int
  id: Int
  name: String
}
"""
Streaming cursor of the table "user"
"""
input user_stream_cursor_input {
  "Stream column input with initial value"
  initial_value: user_stream_cursor_value_input!
  "cursor ordering"
  ordering: cursor_ordering
}
"Initial value of the column from where the streaming should start"
input user_stream_cursor_value_input {
  age: Int
  id: Int
  name: String
}
input user_updates {
  "increments the numeric columns with given value of the filtered values"
  _inc: user_inc_input
  "sets the columns of the filtered rows to the given values"
  _set: user_set_input
  where: user_bool_exp!
}
"whether this query should be cached (Hasura Cloud only)"
directive @cached(
    "measured in seconds"
    ttl: Int! = 60,
    "refresh the cache entry"
    refresh: Boolean! = false
  ) on QUERY
